<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--注册SpringMVC的核心对象 DisPatcherServlet
        需要在Tomcat服务器启动的过程中创建DisPatcher对象
        DisPatcherServlet在他的创建过程中，会同时创建springmvc容器对象，
        读取springmvc的配置文件，把这个文件中的对象都创建好，当用户发起请求时就可以直接使用对象了

        servlet的初始化会执行()方法。DispatcherServlet在init（） 中{
            //创建容器，读取配置文件
            webApplicationContext ctx = File...ApplicationContext("classpath:");
            //把容器对象放入到ServletContext中
            getServletContext().setAttribute(key, ctx);

            报错
            /WEB-INF/springmvc-servlet.xml
        -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springmvc(容器配置文件)读取的配置文件的位置-->
        <init-param>
            <!--springmvc的配置文件的位置属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文集爱你的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--在tomcat启动时，创建servlet对象   表示创建对象的顺序-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>
